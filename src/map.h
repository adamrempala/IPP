/** @file
 * Interfejs klasy przechowujÂ¹cej mapÃª drÃ³g krajowych
 *
 * @author Â£ukasz KamiÃ±ski <kamis@mimuw.edu.pl>, Marcin Peczarski <marpe@mimuw.edu.pl>
 * @copyright Uniwersytet Warszawski
 * @date 20.03.2019
 */

#ifndef __MAP_H__
#define __MAP_H__

#include <stdbool.h>

#include "road.h"
#include "hashtable.h"
/**
 * Struktura przechowujÂ¹ca mapÃª drÃ³g krajowych. Zawiera wskazanie na tablicê haszuj¹c¹ z 
 * powi¹zaniami i tablicê dróg krajowych (tablica routes[0] jest zawsze pusta).
 */
typedef struct Map {
    HashTable *bindings;
    Road* routes[1000];
} Map;

/** @brief Tworzy nowÂ¹ strukturÃª.
 * Tworzy nowÂ¹, pustÂ¹ strukturÃª niezawierajÂ¹cÂ¹ Â¿adnych miast, odcinkÃ³w drÃ³g ani
 * drÃ³g krajowych.
 * @return WskaÅ¸nik na utworzonÂ¹ strukturÃª lub NULL, gdy nie udaÂ³o siÃª
 * zaalokowaÃ¦ pamiÃªci.
 */
Map* newMap(void);

/** @brief Usuwa strukturÃª.
 * Usuwa strukturÃª wskazywanÂ¹ przez @p map.
 * Nic nie robi, jeÅ“li wskaÅ¸nik ten ma wartoÅ“Ã¦ NULL.
 * @param[in] map        â€“ wskaÅ¸nik na usuwanÂ¹ strukturÃª.
 */
void deleteMap(Map *map);

/** @brief Dodaje do mapy odcinek drogi miÃªdzy dwoma rÃ³Â¿nymi miastami.
 * JeÅ“li ktÃ³reÅ“ z podanych miast nie istnieje, to dodaje go do mapy, a nastÃªpnie
 * dodaje do mapy odcinek drogi miÃªdzy tymi miastami.
 * @param[in,out] map    â€“ wskaÅ¸nik na strukturÃª przechowujÂ¹cÂ¹ mapÃª drÃ³g;
 * @param[in] city1      â€“ wskaÅ¸nik na napis reprezentujÂ¹cy nazwÃª miasta;
 * @param[in] city2      â€“ wskaÅ¸nik na napis reprezentujÂ¹cy nazwÃª miasta;
 * @param[in] length     â€“ dÂ³ugoÅ“Ã¦ w km odcinka drogi;
 * @param[in] builtYear  â€“ rok budowy odcinka drogi.
 * @return WartoÅ“Ã¦ @p true, jeÅ“li odcinek drogi zostaÂ³ dodany.
 * WartoÅ“Ã¦ @p false, jeÅ“li wystÂ¹piÂ³ bÂ³Â¹d: ktÃ³ryÅ“ z parametrÃ³w ma niepoprawnÂ¹
 * wartoÅ“Ã¦, obie podane nazwy miast sÂ¹ identyczne, odcinek drogi miÃªdzy tymi
 * miastami juÂ¿ istnieje lub nie udaÂ³o siÃª zaalokowaÃ¦ pamiÃªci.
 */
bool addRoad(Map *map, const char *city1, const char *city2,
             unsigned length, int builtYear);

/** @brief Modyfikuje rok ostatniego remontu odcinka drogi.
 * Dla odcinka drogi miÃªdzy dwoma miastami zmienia rok jego ostatniego remontu
 * lub ustawia ten rok, jeÅ“li odcinek nie byÂ³ jeszcze remontowany.
 * @param[in,out] map    â€“ wskaÅ¸nik na strukturÃª przechowujÂ¹cÂ¹ mapÃª drÃ³g;
 * @param[in] city1      â€“ wskaÅ¸nik na napis reprezentujÂ¹cy nazwÃª miasta;
 * @param[in] city2      â€“ wskaÅ¸nik na napis reprezentujÂ¹cy nazwÃª miasta;
 * @param[in] repairYear â€“ rok ostatniego remontu odcinka drogi.
 * @return WartoÅ“Ã¦ @p true, jeÅ“li modyfikacja siÃª powiodÂ³a.
 * WartoÅ“Ã¦ @p false, jeÅ“li wystÂ¹piÂ³ bÂ³Â¹d: ktÃ³ryÅ“ z parametrÃ³w ma niepoprawnÂ¹
 * wartoÅ“Ã¦, ktÃ³reÅ“ z podanych miast nie istnieje, nie ma odcinka drogi miÃªdzy
 * podanymi miastami, podany rok jest wczeÅ“niejszy niÂ¿ zapisany dla tego odcinka
 * drogi rok budowy lub ostatniego remontu.
 */
bool repairRoad(Map *map, const char *city1, const char *city2, int repairYear);

/** @brief Â£Â¹czy dwa rÃ³Â¿ne miasta drogÂ¹ krajowÂ¹.
 * Tworzy drogÃª krajowÂ¹ pomiÃªdzy dwoma miastami i nadaje jej podany numer.
 * WÅ“rÃ³d istniejÂ¹cych odcinkÃ³w drÃ³g wyszukuje najkrÃ³tszÂ¹ drogÃª. JeÅ“li jest
 * wiÃªcej niÂ¿ jeden sposÃ³b takiego wyboru, to dla kaÂ¿dego wariantu wyznacza
 * wÅ“rÃ³d wybranych w nim odcinkÃ³w drÃ³g ten, ktÃ³ry byÂ³ najdawniej wybudowany lub
 * remontowany i wybiera wariant z odcinkiem, ktÃ³ry jest najmÂ³odszy.
 * @param[in,out] map    â€“ wskaÅ¸nik na strukturÃª przechowujÂ¹cÂ¹ mapÃª drÃ³g;
 * @param[in] routeId    â€“ numer drogi krajowej;
 * @param[in] city1      â€“ wskaÅ¸nik na napis reprezentujÂ¹cy nazwÃª miasta;
 * @param[in] city2      â€“ wskaÅ¸nik na napis reprezentujÂ¹cy nazwÃª miasta.
 * @return WartoÅ“Ã¦ @p true, jeÅ“li droga krajowa zostaÂ³a utworzona.
 * WartoÅ“Ã¦ @p false, jeÅ“li wystÂ¹piÂ³ bÂ³Â¹d: ktÃ³ryÅ“ z parametrÃ³w ma niepoprawnÂ¹
 * wartoÅ“Ã¦, istnieje juÂ¿ droga krajowa o podanym numerze, ktÃ³reÅ“ z podanych
 * miast nie istnieje, obie podane nazwy miast sÂ¹ identyczne, nie moÂ¿na
 * jednoznacznie wyznaczyÃ¦ drogi krajowej miÃªdzy podanymi miastami lub nie udaÂ³o
 * siÃª zaalokowaÃ¦ pamiÃªci.
 */
bool newRoute(Map *map, unsigned routeId,
              const char *city1, const char *city2);

/** @brief WydÂ³uÂ¿a drogÃª krajowÂ¹ do podanego miasta.
 * Dodaje do drogi krajowej nowe odcinki drÃ³g do podanego miasta w taki sposÃ³b,
 * aby nowy fragment drogi krajowej byÂ³ najkrÃ³tszy. JeÅ“li jest wiÃªcej niÂ¿ jeden
 * sposÃ³b takiego wydÂ³uÂ¿enia, to dla kaÂ¿dego wariantu wyznacza wÅ“rÃ³d dodawanych
 * odcinkÃ³w drÃ³g ten, ktÃ³ry byÂ³ najdawniej wybudowany lub remontowany i wybiera
 * wariant z odcinkiem, ktÃ³ry jest najmÂ³odszy.
 * @param[in,out] map    â€“ wskaÅ¸nik na strukturÃª przechowujÂ¹cÂ¹ mapÃª drÃ³g;
 * @param[in] routeId    â€“ numer drogi krajowej;
 * @param[in] city       â€“ wskaÅ¸nik na napis reprezentujÂ¹cy nazwÃª miasta.
 * @return WartoÅ“Ã¦ @p true, jeÅ“li droga krajowa zostaÂ³a wydÂ³uÂ¿ona.
 * WartoÅ“Ã¦ @p false, jeÅ“li wystÂ¹piÂ³ bÂ³Â¹d: ktÃ³ryÅ“ z parametrÃ³w ma niepoprawnÂ¹
 * nazwÃª, nie istnieje droga krajowa o podanym numerze, nie ma miasta o podanej
 * nazwie, przez podane miasto juÂ¿ przechodzi droga krajowa o podanym numerze,
 * podana droga krajowa koÃ±czy siÃª w podanym mieÅ“cie, nie moÂ¿na jednoznacznie
 * wyznaczyÃ¦ nowego fragmentu drogi krajowej lub nie udaÂ³o siÃª zaalokowaÃ¦
 * pamiÃªci.
 */
bool extendRoute(Map *map, unsigned routeId, const char *city);

/** @brief Usuwa odcinek drogi miÃªdzy dwoma rÃ³Â¿nymi miastami.
 * Usuwa odcinek drogi miÃªdzy dwoma miastami. JeÅ“li usuniÃªcie tego odcinka drogi
 * powoduje przerwanie ciÂ¹gu jakiejÅ“ drogi krajowej, to uzupeÂ³nia jÂ¹
 * istniejÂ¹cymi odcinkami drÃ³g w taki sposÃ³b, aby byÂ³a najkrÃ³tsza. JeÅ“li jest
 * wiÃªcej niÂ¿ jeden sposÃ³b takiego uzupeÂ³nienia, to dla kaÂ¿dego wariantu
 * wyznacza wÅ“rÃ³d dodawanych odcinkÃ³w drogi ten, ktÃ³ry byÂ³ najdawniej wybudowany
 * lub remontowany i wybiera wariant z odcinkiem, ktÃ³ry jest najmÂ³odszy.
 * @param[in,out] map    â€“ wskaÅ¸nik na strukturÃª przechowujÂ¹cÂ¹ mapÃª drÃ³g;
 * @param[in] city1      â€“ wskaÅ¸nik na napis reprezentujÂ¹cy nazwÃª miasta;
 * @param[in] city2      â€“ wskaÅ¸nik na napis reprezentujÂ¹cy nazwÃª miasta.
 * @return WartoÅ“Ã¦ @p true, jeÅ“li odcinek drogi zostaÂ³ usuniÃªty.
 * WartoÅ“Ã¦ @p false, jeÅ“li z powodu bÂ³Ãªdu nie moÂ¿na usunÂ¹Ã¦ tego odcinka drogi:
 * ktÃ³ryÅ“ z parametrÃ³w ma niepoprawnÂ¹ wartoÅ“Ã¦, nie ma ktÃ³regoÅ“ z podanych miast,
 * nie istnieje droga miÃªdzy podanymi miastami, nie da siÃª jednoznacznie
 * uzupeÂ³niÃ¦ przerwanego ciÂ¹gu drogi krajowej lub nie udaÂ³o siÃª zaalokowaÃ¦
 * pamiÃªci.
 */
bool removeRoad(Map *map, const char *city1, const char *city2);

/** @brief UdostÃªpnia informacje o drodze krajowej.
 * Zwraca wskaÅ¸nik na napis, ktÃ³ry zawiera informacje o drodze krajowej. Alokuje
 * pamiÃªÃ¦ na ten napis. Zwraca pusty napis, jeÅ“li nie istnieje droga krajowa
 * o podanym numerze. ZaalokowanÂ¹ pamiÃªÃ¦ trzeba zwolniÃ¦ za pomocÂ¹ funkcji free.
 * Informacje wypisywane sÂ¹ w formacie:
 * numer drogi krajowej;nazwa miasta;dÂ³ugoÅ“Ã¦ odcinka drogi;rok budowy lub
 * ostatniego remontu;nazwa miasta;dÂ³ugoÅ“Ã¦ odcinka drogi;rok budowy lub
 * ostatniego remontu;nazwa miasta;â€¦;nazwa miasta.
 * KolejnoÅ“Ã¦ miast na liÅ“cie jest taka, aby miasta @p city1 i @p city2, podane
 * w wywoÂ³aniu funkcji @ref newRoute, ktÃ³re utworzyÂ³o tÃª drogÃª krajowÂ¹, zostaÂ³y
 * wypisane w tej kolejnoÅ“ci.
 * @param[in,out] map    â€“ wskaÅ¸nik na strukturÃª przechowujÂ¹cÂ¹ mapÃª drÃ³g;
 * @param[in] routeId    â€“ numer drogi krajowej.
 * @return WskaÅ¸nik na napis lub NULL, gdy nie udaÂ³o siÃª zaalokowaÃ¦ pamiÃªci.
 */
char const* getRouteDescription(Map *map, unsigned routeId);

#endif /* __MAP_H__ */
